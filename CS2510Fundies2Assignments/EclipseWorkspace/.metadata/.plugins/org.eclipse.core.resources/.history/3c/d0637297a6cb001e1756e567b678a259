import tester.Tester;

class Switcheroo {
  int value;

  Switcheroo(int value) {
    this.value = value;
  }

  Switcheroo choose(Switcheroo that, Switcheroo other) {
    if (this.value < that.value) {
      return other.choose(this, that);
    }
    else if (that.value > other.value) {
      return that.choose(other, new Switcheroo(this.value + 1));
    }
    else {
      return new Switcheroo(this.value * 10);
    }
  }
}

class ExampleSwitcheroo {
  Switcheroo s1 = new Switcheroo(20);
  Switcheroo s2 = new Switcheroo(16);
  Switcheroo s3 = new Switcheroo(2510);

  boolean testSwitcheroo(Tester t) {
    return t.checkExpect(this.s3.choose(this.s1, this.s2),
        this.s1.choose(this.s2, new Switcheroo(2511)));
  }
}

interface ILoInt {
  int dotProduct(ILoInt that);

  int dotProductHelp(int val, ILoInt thisRest);

}

class MtLoInt implements ILoInt {
  MtLoInt() {
  }

  // compute the dot product of this and that
  public int dotProduct(ILoInt that) {
    return 0;
  }

  public int dotProductHelp(int val, ILoInt thisRest) {
    return 0;
  }
}

class ConsLoInt implements ILoInt {
  int first;
  ILoInt rest;

  ConsLoInt(int first, ILoInt rest) {
    this.first = first;
    this.rest = rest;
  }

//compute the dot product of this and that
  public int dotProduct(ILoInt that) {
    return that.dotProductHelp(this.first, this.rest);
  }

  public int dotProductHelp(int val, ILoInt thisRest) {
    return val * this.first + thisRest.dotProduct(this.rest);
  }
}

interface IAT {

  boolean duplicateNames();
  
  boolean stringEqual(String name);
}

class Unknown implements IAT {

  // returns true if anyone in this ancestry tree has the same name as one of
  // their ancestors
  public boolean duplicateNames(String name) {
    return false;
  }

}

class Person implements IAT {
  String name;
  IAT dad, mom;

  Person(String name, IAT dad, IAT mom) {
    this.name = name;
    this.dad = dad;
    this.mom = mom;
  }

  // returns true if anyone in this ancestry tree has the same name as one of
  // their ancestors
  public boolean duplicateNames(String name) {
    return this.mom.stringEqual(name) || this.dad.stringEqual(name) || (this.name.compareTo(name) == 0));
  }
  
  public boolean stringEqual(String name) {
    return this.name.compareTo(name) == 0;
  }
  
  boolean stringEqual(IAT name) {
    return this.name.equals(name);
  }
}
