import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

import tester.*;
import javalib.impworld.*;
import java.awt.Color;
import javalib.worldimages.*;

// represents a world class 
class MinesweeperWorld extends World {
  int rows;
  int columns;
  int mines;
  ArrayList<ArrayList<Cells>> board;

  MinesweeperWorld(int rows, int columns, int mines) {
    if (rows > 1) {
      this.rows = rows;
    }
    else {
      throw new IllegalArgumentException("rows have to be greater than 1");
    }
    if (columns > 1) {
      this.columns = columns;
    }
    else {
      throw new IllegalArgumentException("columns have to be greater than 1");
    }
    if (mines <= rows * columns) {
      this.mines = mines;
    }
    else {
      throw new IllegalArgumentException("can't have more mines than cells available");
    }
    this.board = new ArrayList<ArrayList<Cells>>();
    this.makeBoard();
    this.getNeighbor();

    ArrayList<Posn> mineList = randomMines(mines);
    this.addMines(mineList);
  }

  // new constructor
  MinesweeperWorld() {
    this.rows = 10;
    this.columns = 15;
    this.mines = 5;
  }

  // draws the board
  public WorldScene makeScene() {
    return new WorldScene(rows, columns);
  }

  // draws the starting board with the given rows and columns
  public void makeBoard() {
    // ArrayList<ArrayList<Cells>> board1 = new ArrayList<ArrayList<Cells>>();
    for (int i = 0; i < this.rows; i++) {
      ArrayList<Cells> curRow = new ArrayList<Cells>();
      for (int j = 0; j < this.columns; j++) {
        curRow.add(new Cells(false, new ArrayList<Cells>()));
      }
      board.add(curRow);
    }
  }

  // determines the list of neighbors of this cell
  public void getNeighbor() {
    // return new ArrayList<Cells>(get()
    for (int i = 0; i < this.rows; i++) {
      for (int j = 0; j < this.columns; j++) {
        if (i != 0 && i != this.rows - 1 && j != 0 && j != this.columns - 1) { // not a t, b, l, r
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j + 1)); // gets top right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j - 1)); // gets top left
          board.get(i).get(j).updateCell(board.get(i + 1).get(j + 1)); // gets bottom right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j - 1)); // gets bottom left
        }

        if (i == 0 && j != 0 && j != this.columns - 1) { // is a top and not a left and not a right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j + 1)); // gets bottom right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j - 1)); // gets bottom left
        }

        if (i == this.rows - 1 && j != 0 && j != this.columns - 1) { // is a bottom and not a left
                                                                     // and not a right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j + 1)); // gets top right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j - 1)); // gets top left
        }

        if (j == 0 && i != 0 && i != this.rows - 1) { // is a left and not a top and not a bottom
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j + 1)); // gets top right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j + 1)); // gets bottom right
        }

        if (j == this.columns - 1 && i != 0 && i != this.rows - 1) { // is a right and not a top and
                                                                     // not a bottom
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i - 1).get(j - 1)); // gets top left
          board.get(i).get(j).updateCell(board.get(i + 1).get(j - 1)); // gets bottom left
        }

        if (i == 0 && j == 0) { // top and left
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j + 1)); // gets bottom right
        }

        if (i == 0 && j == this.columns - 1) { // top and right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i + 1).get(j - 1)); // gets bottom left
        }

        if (i == this.rows - 1 && j == 0) { // bottom and left
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j + 1)); // gets top right
        }
        if (i == this.rows - 1 && j == this.columns - 1) { // bottom and right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i - 1).get(j - 1)); // gets top left
        }
      }
    }
  }

  // adds the mines to the board
  public void addMines(ArrayList<Posn> curMineList) {
    ArrayList<Posn> mineList = randomMines(mines);

    for (Posn coord : mineList) {
      board.get(coord.x).get(coord.y).makeMine();
    }
  }

  // random placement of mines
  public ArrayList<Posn> randomMines(int mines) {
    ArrayList<Posn> curMineList = new ArrayList<Posn>();
    while (curMineList.size() < mines) {
      int xposn = (int) (new Random().nextInt(this.rows));
      int yposn = (int) (new Random().nextInt(this.columns));
      Posn randPosn = new Posn(xposn, yposn);
      if (!curMineList.contains(randPosn)) {
        curMineList.add(randPosn);
      }
    }
    return curMineList;
  }

  /*
   * int rowCount = 0; while (rowCount < rows) { ArrayList<Cells> curRow = new
   * ArrayList<Cells>(); int colCount = 0; while (colCount < columns) {
   * curRow.add(new Cells(false, new ArrayList<Cells>())); colCount++; }
   * board.add(curRow); rowCount++; } }
   */
}

// represents the minesweeper interface
interface IMineSweeper {

}

// represents a cell
class Cells implements IMineSweeper {
  boolean hasMine;
  ArrayList<Cells> neighbors;

  Cells(boolean hasMine, ArrayList<Cells> neighbors) {
    this.hasMine = hasMine;
    this.neighbors = new ArrayList<Cells>();
  }

  // updates the list of neighbors
  public void updateCell(Cells curCell) {
    this.neighbors.add(curCell);
  }

  // marks the cell as having a mine
  public void makeMine() {
    new Cells(true, this.neighbors);
  }

  // count the number of mines neighboring a particular cell
  public int countMines() {
    int curMineCount = 0;
    for (Cells c : this.neighbors) {
      if (c.haveAMine() == true) {
        curMineCount += curMineCount + 1;
      }
    }
    return curMineCount;
  }

  // does this cell have a mine
  public boolean haveAMine() {
    return this.hasMine;
  }
}

// examples class
class MineSweeperExamples {

  ArrayList<Cells> row;
  ArrayList<Cells> col;
  MinesweeperWorld board1;
  MinesweeperWorld board2;
  MinesweeperWorld board3;
  MinesweeperWorld board4;
  Cells cell1 = new Cells(false, new ArrayList<Cells>());
  Cells cell2 = new Cells(false, new ArrayList<Cells>());
  Cells cell3 = new Cells(false, new ArrayList<Cells>());
  Cells cell4 = new Cells(false, new ArrayList<Cells>());
  Cells cell5 = new Cells(true, new ArrayList<Cells>());
  Cells cell6 = new Cells(true, new ArrayList<Cells>());
  Cells cell7 = new Cells(true, new ArrayList<Cells>());

  // ArrayList<Cells> neighbors1 = new ArrayList<Cells>(cell1,)

  void initTestConditions() {
    ArrayList<Cells> row = new ArrayList<Cells>();
    ArrayList<Cells> col = new ArrayList<Cells>();
    board1 = new MinesweeperWorld(6, 6, 3);
    board2 = new MinesweeperWorld(30, 16, 40);
    board3 = new MinesweeperWorld(10, 12, 3);
    board4 = new MinesweeperWorld(2, 2, 3);

    this.board1.makeBoard();

    MinesweeperWorld minesweeper1 = new MinesweeperWorld();

    cell1.updateCell(cell2);
    cell1.updateCell(cell3);

    cell1.makeMine();
    cell3.makeMine();
    cell4.makeMine();
    cell5.makeMine();

  }

  // testing makeBoard
  boolean testMakeBoard(Tester t) {
    initTestConditions();
    // t.checkExpect(board1.board.size(), 5)
    return t.checkExpect(board1.rows, 6) && t.checkExpect(board2.columns, 16)
        && t.checkExpect(board3.rows, 10) && t.checkExpect(board3.columns, 12);
  }

  // testing get neighbor
  boolean testGetNeighbor(Tester t) {
    initTestConditions();
    // testing 2x2 board
    // top left's neighbors
    return t.checkExpect(board4.board.get(0).get(0).neighbors,
        new ArrayList<Cells>(Arrays.asList(board4.board.get(0).get(1), board4.board.get(1).get(0),
            board4.board.get(1).get(1))))
        // top right's neighbors
        && t.checkExpect(board4.board.get(0).get(1).neighbors,
            new ArrayList<Cells>(Arrays.asList(board4.board.get(0).get(0),
                board4.board.get(1).get(0), board4.board.get(1).get(1))))
        // bottom left
        && t.checkExpect(board4.board.get(1).get(0).neighbors,
            new ArrayList<Cells>(Arrays.asList(board4.board.get(0).get(0),
                board4.board.get(0).get(1), board4.board.get(1).get(1))))
        // bottom right
        && t.checkExpect(board4.board.get(1).get(1).neighbors,
            new ArrayList<Cells>(Arrays.asList(board4.board.get(0).get(0),
                board4.board.get(1).get(0), board4.board.get(0).get(1))));
  }

  // test IllegalArgumentException
  boolean testCheckException(Tester t) {
    return t.checkConstructorException(
        new IllegalArgumentException("rows have to be greater than 1"), "MinesweeperWorld", 1, 6, 3)
        && t.checkConstructorException(
            new IllegalArgumentException("columns have to be greater than 1"), "MinesweeperWorld",
            4, 1, 3)
        && t.checkConstructorException(
            new IllegalArgumentException("can't have more mines than cells available"),
            "MinesweeperWorld", 4, 4, 20);
  }

  // test for random

  // test updateCell

  // test for makeMine
  boolean testMakeMine(Tester t) {
    initTestConditions();
    cell1.makeMine();
    return t.checkExpect(this.cell1.hasMine, true) && t.checkExpect(this.cell3.hasMine, true)
        && t.checkExpect(this.cell4.hasMine, true) && t.checkExpect(this.cell5.hasMine, true)
        && t.checkExpect(this.cell2.hasMine, false);
  }

  // test for addMines

  // test for randomMines

  // test for haveAMine
  boolean testHaveAMine(Tester t) {
    initTestConditions();
    return t.checkExpect(this.cell1.haveAMine(), false)
        && t.checkExpect(this.cell2.haveAMine(), false)
        && t.checkExpect(this.cell3.haveAMine(), false)
        && t.checkExpect(this.cell4.haveAMine(), false)
        && t.checkExpect(this.cell5.haveAMine(), true)
        && t.checkExpect(this.cell6.haveAMine(), true)
        && t.checkExpect(this.cell6.haveAMine(), true);
  }

  // test for countMines

  /*
   * boolean testUpdateCell(Tester t) { initTestConditions(); return
   * t.checkExpect(this.cell1, new Cells(false, new
   * ArrayList<Cells>(Arrays.asList(cell2, cell3)))); }
   */

 /* boolean testBigBang(Tester t) {
    MinesweeperWorld world = new MinesweeperWorld(12, 15, 9);
    int worldWidth = 600;
    int worldHeight = 800;
    return world.bigBang(worldWidth, worldHeight);
  }*/
}
