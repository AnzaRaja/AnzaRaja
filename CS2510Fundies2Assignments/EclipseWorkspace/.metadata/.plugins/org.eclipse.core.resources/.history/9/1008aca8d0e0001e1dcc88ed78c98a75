import java.util.Comparator;
import java.util.function.Predicate;

import tester.Tester;

class Course {
  String name;
  Instructor prof;
  IList<Student> students;

  Course(String name, Instructor prof, IList<Student> students) {
    this.name = name;
    this.prof = prof;
    this.students = students;
  }

  // adds a Student in the given list of students for this Course
  void enrollHelp(Student s) {
    this.students = new ConsList<Student>(s, this.students);
  }

  // is this student in the list of courses
  boolean studentInLOC(Student s) {
    return this.students.contains(s);
  }
}

class Instructor {
  String name;
  IList<Course> courses;

  Instructor(String name) {
    this.name = name;
    this.courses = new MtList<Course>();
  }
}

class Student {
  String name;
  int id;
  IList<Course> courses;

  Student(String name, int id) {
    this.name = name;
    this.id = id;
    this.courses = new MtList<Course>();
  }

  // enrolls a Student in the given Course
  void enroll(Course c) {
    this.courses = new ConsList<Course>(c, this.courses);
    c.enrollHelp(this);
  }

  // determines whether the given Student is in any of the same classes as this
  // Student
  boolean classmates(Student s) {
    return this.courses.classmatesHelper(s);
  }

  // is this student the same as given student
  boolean sameStudent(Student s) {
    return this.id == s.id;
  }
}

interface IList<T> {

  // generic contains method
  boolean contains(Predicate<T> pred);

  boolean classmatesHelper(Student s);
}

class MtList<T> implements IList<T> {
  MtList() {
  }

  // generic contains method
  public boolean contains(Predicate<T> pred) {
    return false;
  }

}

class ConsList<T> implements IList<T> {
  T first;
  IList<T> rest;

  ConsList(T first, IList<T> rest) {
    this.first = first;
    this.rest = rest;
  }

  // generic contains method
  public boolean contains(Predicate<T> pred) {
    if (pred.test(this.first)) {
      return true;
    }
    else {
      return this.rest.contains(pred);
    }
  }

  // generic contains method for comparator
  public boolean containsComparator(Predicate<T> pred, T t) {
    if (compareTo.test(this.first)) {
      return true;
    }
    else {
      return this.rest.contains(pred);
    }
  }

 // Predicate<Student> inClass = (Student -> Course.contains(s));

  //
  boolean classmatesHelper(Student s) {
    return this.first.studentInLOC(s) || this.rest.classmatesHelper(s);
  }

  // is this student the same as the given student
  boolean sameStudent(Student s) {
    return this.first.equals
  }
}

interface IPred<T> {

  boolean apply(T t);
}

class StudentInCourse implements IPred<Course> {
  Student student;

  StudentInCourse(Student s) {
    this.student = s;
  }

  public boolean apply(Course course) {
    course.studentInLOC(student);
  }
}

class ContainsStudent implements Comparator<Student> {
  Student student;

  ContainsStudent(Student s) {
    this.student = s;
  }

  // checks if this student is in the list of student of a course
  public boolean compare(Student stu1, Student stu2) {
    stu1.sameStudent(stu2);
  }
}

//examples for the class that represents courses
class ExamplesCourse {

  Student jane = new Student("Jane", 123456);
  Student alicia = new Student("Alicia", 789101);
  Student max = new Student("Max", 112131);
  Student valerie = new Student("Valerie", 415161);
  Student hari = new Student("Hari", 718192);
  Student josh = new Student("Josh", 021222);
  Student ashley = new Student("Ashley", 324252);
  Student devan = new Student("Devan", 627282);
  Student alex = new Student("Alex", 930313);
  Student will = new Student("Will", 233343);

  // empty list of course and student
  IList<Course> mtCourse = new MtList<Course>();
  IList<Student> mtStudent = new MtList<Student>();

  IList<Student> csStudents = new ConsList<Student>(this.jane,
      new ConsList<Student>(this.alicia,
          new ConsList<Student>(this.max, new ConsList<Student>(this.valerie,
              new ConsList<Student>(this.hari, new MtList<Student>())))));

  IList<Student> starterCsStudents = new ConsList<Student>(this.devan,
      new ConsList<Student>(this.alex, new ConsList<Student>(this.jane, new MtList<Student>())));

  IList<Student> businessStudents = new ConsList<Student>(this.josh,
      new ConsList<Student>(this.ashley, new MtList<Student>()));

  IList<Student> busStudents = new ConsList<Student>(this.will, new MtList<Student>());

  // cs classes
  Course fundies1 = new Course("Fundies1", this.razzaq, this.starterCsStudents);
  Course ood = new Course("Object Oriented Design", this.razzaq, this.starterCsStudents);
  Course fundies2 = new Course("Fundies2", this.lerner, this.csStudents);
  Course algo = new Course("Algorithms", this.park, this.csStudents);
  Course digitalDesign = new Course("Digital design", this.ferd, this.csStudents);

  IList<Course> csClasses = new ConsList<Course>(this.fundies2,
      new ConsList<Course>(this.algo, new ConsList<Course>(this.digitalDesign, this.mtCourse)));

  IList<Course> starterCsClasses = new ConsList<Course>(this.fundies1,
      new ConsList<Course>(this.ood, this.mtCourse));

  // business classes
  Course acct1201 = new Course("Financial Accounting", this.xiao, this.businessStudents);
  Course acct1203 = new Course("Financial Accounting 2", this.xiao, this.businessStudents);

  Course intb = new Course("International Business", this.smith, this.businessStudents);
  Course busCalc = new Course("Business Calc", this.miller, this.busStudents);

  IList<Course> businessClasses = new ConsList<Course>(this.acct1201,
      new ConsList<Course>(this.acct1203, new ConsList<Course>(this.intb, this.mtCourse)));
  IList<Course> busClass = new ConsList<Course>(this.busCalc, this.mtCourse);

  IList<Course> businessClassesXiao = new ConsList<Course>(this.acct1201,
      new ConsList<Course>(this.acct1203, this.mtCourse));

  IList<Course> businessClassesSmith = new ConsList<Course>(this.acct1201,
      new ConsList<Course>(this.acct1203, new ConsList<Course>(this.intb, this.mtCourse)));

  Instructor ferd = new Instructor("Ferdinand");
  Instructor lerner = new Instructor("Lerner");
  Instructor park = new Instructor("Park");
  Instructor razzaq = new Instructor("Razzaq");
  Instructor xiao = new Instructor("Xiao");
  Instructor smith = new Instructor("Smith");
  Instructor miller = new Instructor("Miller");

  // Jane
  this.jane.enroll(fundies1);this.jane.enroll(ood);this.jane.enroll(digitalDesign);
  // Alicia
  this.alicia.enroll(fundies1);this.alicia.enroll(ood);this.alicia.enroll(digitalDesign);
  // Max
  this.max.enroll(fundies1);this.max.enroll(ood);this.max.enroll(digitalDesign);
  // Valerie
  this.valerie.enroll(fundies1);this.valerie.enroll(ood);this.valerie.enroll(digitalDesign);
  // Hari
  this.hari.enroll(fundies1);this.hari.enroll(ood);this.hari.enroll(digitalDesign);

  // tests for classmates
  boolean testClassmates(Tester t) {
    return t.checkExpect(this.jane.classmates(this.josh), false)
        && t.checkExpect(this.jane.classmates(this.max), true)
        && t.checkExpect(this.ashley.classmates(this.josh), true);
  }

  // tests for dejavu
  boolean testDejavu(Tester t) {
    return t.checkExpect(this.ferd.dejavu(this.jane), true)
        && t.checkExpect(this.lerner.dejavu(this.alex), false)
        && t.checkExpect(this.xiao.dejavu(this.josh), true)
        && t.checkExpect(this.smith.dejavu(this.josh), false);
  }

}
