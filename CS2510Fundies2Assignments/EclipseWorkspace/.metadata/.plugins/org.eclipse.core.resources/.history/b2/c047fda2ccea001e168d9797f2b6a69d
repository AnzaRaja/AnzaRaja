import java.util.ArrayList;
import tester.*;
import javalib.impworld.*;
import java.awt.Color;
import javalib.worldimages.*;

// represents a world class 
class MinesweeperWorld extends World {
  int rows;
  int columns;
  int mines;
  ArrayList<ArrayList<Cells>> board;

  MinesweeperWorld(int rows, int columns, int mines) {
    if (rows > 4) {
      this.rows = rows;
    }
    else {
      throw new IllegalArgumentException("rows have to be greater than 4");
    }
    if (columns > 4) {
      this.columns = columns;
    }
    else {
      throw new IllegalArgumentException("columns have to be greater than 4");
    }
    if (mines <= rows * columns) {
      this.mines = mines;
    }
    else {
      throw new IllegalArgumentException("can't have more mines than cells available");
    }
    this.makeBoard(this.rows, this.columns);
    System.out.println(this.rows);
    System.out.println(this.columns);
  }

  // draws the board
  public WorldScene makeScene() {
    return new WorldScene(rows, columns);
  }

  // draws the board with the given rows and columns
  public void makeBoard(int rows, int columns) {
    int rowCount = 0;
    while (rowCount < rows) {
      ArrayList<Cells> curRow = new ArrayList<Cells>();
      int colCount = 0;
      while (colCount < columns) {
        curRow.add(new Cells(false, new ArrayList<Cells>()));
        colCount++;
      }
      board.add(curRow);
      rowCount++;
    }
  }
}

// represents the minesweeper interface
interface IMineSweeper {

}

// represents a cell
class Cells implements IMineSweeper {
  boolean hasMine;
  ArrayList<Cells> neighbors;

  Cells(boolean hasMine, ArrayList<Cells> neighbors) {
    this.hasMine = hasMine;
    this.neighbors = neighbors;
  }
}

// examples class
class MineSweeperExamples {

  ArrayList<Cells> row;
  ArrayList<Cells> col;
  MinesweeperWorld board1;

  void initTestConditions() {
    ArrayList<Cells> row = new ArrayList<Cells>();
    ArrayList<Cells> col = new ArrayList<Cells>();
    board1 = new MinesweeperWorld(6, 6, 3);
    this.board1.makeBoard(5, 8);
  }

  boolean testMakeBoard(Tester t) {
    initTestConditions();
    // t.checkExpect(board1.board.size(), 5)
    return t.checkExpect(board1.rows, 5);
    }
}
