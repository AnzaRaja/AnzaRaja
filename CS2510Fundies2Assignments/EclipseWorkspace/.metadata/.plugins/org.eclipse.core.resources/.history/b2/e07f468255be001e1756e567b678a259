//import tester.Tester;

//represents a list of words
interface ILoWord {

  // produces a new list, with words sorted in alphabetical order,
  // treating all Strings as if they were given in all lower case.
  ILoWord sort();
  
  //determines whether this list of IWords has words sorted in alphabetical order, 
  //in a case-insensitive way.
  boolean isSorted();
  
  //takes this list of IWords and a given list of IWords, and produces a list where the first, 
  //third, fifth... elements are from this list, and the second, fourth, sixth... elements 
  //are from the given list.
  ILoWord interleave();
  
  //merges this sorted list of IWords and a given sorted list of IWords, and produces a sorted 
  //list of IWords that contains all items in both original lists, including duplicates, treating 
  //all Strings as if they were given in all lower case.
  ILoWord merge();

}

//represents an empty list of words
class MtLoWord implements ILoWord {
  
  /*- TEMPLATE
  FIELDS:
  
  METHODS
  ... this.sort() ...                 -- ILoWord
  ... this.isSorted() ...             -- boolean
  ... this.interleave.() ...           -- ILoWord
  ... this.merge() ...                -- ILoWord
  ... this.() ...                     -- 
  */
  
  //produces a new list, with words sorted in alphabetical order,
  // treating all Strings as if they were given in all lower case.
  public ILoWord sort() {
    return this;
  }
  
  //determines whether this list of IWords has words sorted in alphabetical order, 
  //in a case-insensitive way.
  public boolean isSorted() {
    return true;
  }
  
  //takes this list of IWords and a given list of IWords, and produces a list where the first, 
  //third, fifth... elements are from this list, and the second, fourth, sixth... elements 
  //are from the given list.
  public ILoWord interleave() {
    return this;
  }
  
  //merges this sorted list of IWords and a given sorted list of IWords, and produces a sorted 
  //list of IWords that contains all items in both original lists, including duplicates, treating 
  //all Strings as if they were given in all lower case.
  public ILoWord merge() {
    return this;
  }

}

class ConsLoWord implements ILoWord {
  IWord first;
  ILoWord rest;

  ConsLoWord(IWord first, ILoWord rest) {
    this.first = first;
    this.rest = rest;
  }
  
  /*- TEMPLATE
  FIELDS:
  ... this.first ...                   -- IWord
  ... this.rest ...                    -- ILoWord
  
  METHODS
  ... this.sort() ...                 -- ILoWord
  ... this.isSorted() ...             -- boolean
  ... this.interleave() ...           -- ILoWord
  ... this.merge() ...                -- ILoWord
  ... this.() ...                     -- 
  */
  
  //produces a new list, with words sorted in alphabetical order,
  // treating all Strings as if they were given in all lower case.
  public ILoWord sort() {
    return this;
  }
  
  //determines whether this list of IWords has words sorted in alphabetical order, 
  //in a case-insensitive way.
  public boolean isSorted() {
    return false;
  }
  
  //takes this list of IWords and a given list of IWords, and produces a list where the first, 
  //third, fifth... elements are from this list, and the second, fourth, sixth... elements 
  //are from the given list.
  public ILoWord interleave() {
    return this;
  }
  
  //merges this sorted list of IWords and a given sorted list of IWords, and produces a sorted 
  //list of IWords that contains all items in both original lists, including duplicates, treating 
  //all Strings as if they were given in all lower case.
  public ILoWord merge() {
    return this;
  }

}

//represents a word in the ZType game
interface IWord {
  
}


//represents an active word in the ZType game
class ActiveWord implements IWord {
  String word;
  int x;
  int y;

  ActiveWord(String word, int x, int y) {
    this.word = word;
    this.x = x;
    this.y = y;
  }
  
}

//represents an inactive word in the ZType game
class InactiveWord implements IWord {
  String word;
  int x;
  int y;

  InactiveWord(String word, int x, int y) {
    this.word = word;
    this.x = x;
    this.y = y;
  }
  
}

//all examples and tests for ILoWord
class ExamplesWordLists {

}