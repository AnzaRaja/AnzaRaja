import java.util.ArrayList;
import java.util.Arrays;

import tester.*;
import javalib.impworld.*;
import java.awt.Color;
import javalib.worldimages.*;

// to represent the LightEmAll class
class LightEmAll extends World {

  // a list of columns of GamePieces,
  // i.e., represents the board in column-major order
  ArrayList<ArrayList<GamePiece>> board;

  // a list of all nodes
  ArrayList<GamePiece> nodes;

  // a list of edges of the minimum spanning tree
  ArrayList<Edge> mst;

  // the width and height of the board
  int width;
  int height;

  // the current location of the power station,
  // as well as its effective radius
  int powerRow;
  int powerCol;
  int radius;

  LightEmAll(int width, int height, ArrayList<ArrayList<GamePiece>> board) {
    this.width = width;
    this.height = height;
    this.board = board;
  }

  // draws the board
  public WorldScene makeScene() {
    WorldScene scene = new WorldScene(this.width, this.height);
    for (int r = 0; r < board.size(); r++) {
      for (int c = 0; c < board.get(0).size(); c++) {
        scene.placeImageXY(board.get(r).get(c).drawGamePiece(), (r * 60) + 30, (c * 60) + 30);
      }
    }
    return scene;
  }
}

// to represent an edge
class Edge {
  GamePiece fromNode;
  GamePiece toNode;
  int weight;

  Edge(GamePiece fromNode, GamePiece toNode, int weight) {
    this.fromNode = fromNode;
    this.toNode = toNode;
    this.weight = weight;
  }
}

// to represent a GamePiece
class GamePiece {
  // in logical coordinates, with the origin
  // at the top-left corner of the screen
  int row;
  int col;
  // whether this GamePiece is connected to the
  // adjacent left, right, top, or bottom pieces
  boolean left;
  boolean right;
  boolean top;
  boolean bottom;
  // whether the power station is on this piece
  boolean powerStation;
  boolean powered;

  GamePiece(int row, int col, boolean left, boolean right, boolean top, boolean bottom,
      boolean powerStation, boolean powered) {
    this.row = row;
    this.col = col;
    this.left = left;
    this.right = right;
    this.top = top;
    this.bottom = bottom;
    this.powerStation = powerStation;
    this.powered = powered;
  }

  // draws an individual GamePiece
  public WorldImage drawGamePiece() {
    // Tile with a bottom wire unpowered *
    WorldImage bot = new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
        new OverlayOffsetImage(new RectangleImage(6, 30, "solid", Color.lightGray), 0, -15,
            new RectangleImage(60, 60, "solid", Color.darkGray)));

    // Tile with a bottom wire powered *
    WorldImage botPow = new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
        new OverlayOffsetImage(new RectangleImage(6, 30, "solid", Color.yellow), 0, -15,
            new RectangleImage(60, 60, "solid", Color.darkGray)));

    // Tile with a top wire unpowered *
    WorldImage top = new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
        new OverlayOffsetImage(new RectangleImage(6, 30, "solid", Color.lightGray), 0, 15,
            new RectangleImage(60, 60, "solid", Color.darkGray)));

    // Tile with a top wire powered *
    WorldImage topPow = new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
        new OverlayOffsetImage(new RectangleImage(6, 30, "solid", Color.yellow), 0, 15,
            new RectangleImage(60, 60, "solid", Color.darkGray)));

    // Tile with a top and bottom wire unpowered *
    WorldImage topBot = new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
        new OverlayImage(new RectangleImage(6, 60, "solid", Color.lightGray),
            new RectangleImage(60, 60, "solid", Color.darkGray)));

    // Tile with a top and bottom wire powered *
    WorldImage topBotPow = new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
        new OverlayImage(new RectangleImage(6, 60, "solid", Color.yellow),
            new RectangleImage(60, 60, "solid", Color.darkGray)));

    // Tile with a top, bottom and right wire unpowered *
    WorldImage topBotRight = new OverlayOffsetImage(
        new RectangleImage(30, 6, "solid", Color.lightGray), -15, 0,
        new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
            new OverlayImage(new RectangleImage(6, 60, "solid", Color.lightGray),
                new RectangleImage(60, 60, "solid", Color.darkGray))));

    // Tile with a top, bottom and right wire powered *
    WorldImage topBotRightPow = new OverlayOffsetImage(
        new RectangleImage(30, 6, "solid", Color.yellow), -15, 0,
        new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
            new OverlayImage(new RectangleImage(6, 60, "solid", Color.yellow),
                new RectangleImage(60, 60, "solid", Color.darkGray))));

    // Tile with a top, bottom and left wire unpowered *
    WorldImage topBotLeft = new OverlayOffsetImage(
        new RectangleImage(30, 6, "solid", Color.lightGray), 15, 0,
        new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
            new OverlayImage(new RectangleImage(6, 60, "solid", Color.lightGray),
                new RectangleImage(60, 60, "solid", Color.darkGray))));

    // Tile with a top, bottom and left wire powered *
    WorldImage topBotLeftPow = new OverlayOffsetImage(
        new RectangleImage(30, 6, "solid", Color.yellow), 15, 0,
        new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
            new OverlayImage(new RectangleImage(6, 60, "solid", Color.yellow),
                new RectangleImage(60, 60, "solid", Color.darkGray))));

    // Tile with a top, bottom, left and right wire unpowered *
    WorldImage topBotLeftRight = new OverlayImage(
        new RectangleImage(60, 6, "solid", Color.lightGray),
        new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
            new OverlayImage(new RectangleImage(6, 60, "solid", Color.lightGray),
                new RectangleImage(60, 60, "solid", Color.darkGray))));

    // Tile with a top, bottom, left and right wire powered *
    WorldImage topBotLeftRightPow = new OverlayImage(
        new RectangleImage(60, 6, "solid", Color.yellow),
        new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
            new OverlayImage(new RectangleImage(6, 60, "solid", Color.yellow),
                new RectangleImage(60, 60, "solid", Color.darkGray))));

    // Tile with a top, bottom, left and right unpowered and a power station *
    WorldImage tblrPowerStation = new OverlayImage(new StarImage(18, OutlineMode.SOLID, Color.CYAN),
        new OverlayImage(new RectangleImage(60, 6, "solid", Color.lightGray),
            new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
                new OverlayImage(new RectangleImage(6, 60, "solid", Color.lightGray),
                    new RectangleImage(60, 60, "solid", Color.darkGray)))));

    // Tile with a top, bottom, left and right powered and a power station *
    WorldImage tblrPowerStationPow = new OverlayImage(
        new StarImage(18, OutlineMode.SOLID, Color.CYAN),
        new OverlayImage(new RectangleImage(60, 6, "solid", Color.yellow),
            new OverlayImage(new RectangleImage(60, 60, "outline", Color.black),
                new OverlayImage(new RectangleImage(6, 60, "solid", Color.yellow),
                    new RectangleImage(60, 60, "solid", Color.darkGray)))));

    // top unpowered
    if (this.top && !this.bottom && !this.left && !this.right && !this.powered
        && !this.powerStation) {
      return top;
    }
    else if (this.top && !this.bottom && !this.left && !this.right && this.powered
        && !this.powerStation) {
      return topPow;
    }
    // bottom unpowered
    else if (this.bottom && !this.top && !this.left && !this.right && !this.powered
        && !this.powerStation) {
      return bot;
    }
    else if (this.bottom && !this.top && !this.left && !this.right && this.powered
        && !this.powerStation) {
      return botPow;
    }
    // tb unpowered
    else if (this.bottom && this.top && !this.left && !this.right && !this.powered
        && !this.powerStation) {
      return topBot;
    }
    else if (this.bottom && this.top && !this.left && !this.right && this.powered
        && !this.powerStation) {
      return topBotPow;
    }
    // tbr unpowered and not powerstation
    else if (this.bottom && this.top && this.right && !this.left && !this.powered
        && !this.powerStation) {
      return topBotRight;
    }
    // tbr powered and not powerstation
    else if (this.bottom && this.top && this.right && !this.left && this.powered
        && !this.powerStation) {
      return topBotRightPow;
    }
    // tbl unpowered and not powerstation
    else if (this.bottom && this.top && this.left && !this.right && !this.powered
        && !this.powerStation) {
      return topBotLeft;
    }
    // tbl powered and not powerstation
    else if (this.bottom && this.top && this.left && !this.right && this.powered
        && !this.powerStation) {
      return topBotLeftPow;
    }
    // tblr unpowered not powered and not powerstation
    else if (this.bottom && this.top && this.left && this.right && !this.powered
        && !this.powerStation) {
      return topBotLeftRight;
    }
    // tblr powered and not powerstation
    else if (this.bottom && this.top && this.left && this.right && this.powered
        && !this.powerStation) {
      return topBotLeftRightPow;

    } // tblr unpowered with powerstation
    else if (this.bottom && this.top && this.left && this.right && !this.powered
        && this.powerStation) {
      return tblrPowerStation;
    }
    // tblr powered and powerstation
    else
      return tblrPowerStationPow;
  }
}

//all examples and tests for LightEmALl
class ExamplesLightEmAll {

  ArrayList<GamePiece> col0 = new ArrayList<>(
      Arrays.asList(new GamePiece(0, 0, false, false, false, true, false, false),
          new GamePiece(1, 0, false, false, true, true, false, false),
          new GamePiece(2, 0, false, false, true, true, false, false),
          new GamePiece(3, 0, false, false, true, true, false, false),
          new GamePiece(4, 0, false, true, true, true, false, false),
          new GamePiece(5, 0, false, false, true, true, false, false),
          new GamePiece(6, 0, false, false, true, true, false, false),
          new GamePiece(7, 0, false, false, true, true, false, false),
          new GamePiece(8, 0, false, false, true, false, false, false)));

  ArrayList<GamePiece> col1 = new ArrayList<>(
      Arrays.asList(new GamePiece(0, 1, false, false, false, true, false, false),
          new GamePiece(1, 1, false, false, true, true, false, false),
          new GamePiece(2, 1, false, false, true, true, false, false),
          new GamePiece(3, 1, false, false, true, true, false, false),
          new GamePiece(4, 1, true, true, true, true, false, false),
          new GamePiece(5, 1, false, false, true, true, false, false),
          new GamePiece(6, 1, false, false, true, true, false, false),
          new GamePiece(7, 1, false, false, true, true, false, false),
          new GamePiece(8, 1, false, false, true, false, false, false)));

  ArrayList<GamePiece> col2 = new ArrayList<>(
      Arrays.asList(new GamePiece(0, 2, false, false, false, true, false, false),
          new GamePiece(1, 2, false, false, true, true, false, false),
          new GamePiece(2, 2, false, false, true, true, false, false),
          new GamePiece(3, 2, false, false, true, true, false, false),
          new GamePiece(4, 2, true, true, true, true, false, false),
          new GamePiece(5, 2, false, false, true, true, false, false),
          new GamePiece(6, 2, false, false, true, true, false, false),
          new GamePiece(7, 2, false, false, true, true, false, false),
          new GamePiece(8, 2, false, false, true, false, false, false)));

  ArrayList<GamePiece> col3 = new ArrayList<>(
      Arrays.asList(new GamePiece(0, 3, false, false, false, true, false, false),
          new GamePiece(1, 3, false, false, true, true, false, false),
          new GamePiece(2, 3, false, false, true, true, false, false),
          new GamePiece(3, 3, false, false, true, true, false, false),
          new GamePiece(4, 3, true, true, true, true, false, false),
          new GamePiece(5, 3, false, false, true, true, false, false),
          new GamePiece(6, 3, false, false, true, true, false, false),
          new GamePiece(7, 3, false, false, true, true, false, false),
          new GamePiece(8, 3, false, false, true, false, false, false)));

  // has powerstation
  ArrayList<GamePiece> col4 = new ArrayList<>(
      Arrays.asList(new GamePiece(0, 4, false, false, false, true, false, false),
          new GamePiece(1, 4, false, false, true, true, false, false),
          new GamePiece(2, 4, false, false, true, true, false, false),
          new GamePiece(3, 4, false, false, true, true, false, false),
          new GamePiece(4, 4, true, true, true, true, true, false),
          new GamePiece(5, 4, false, false, true, true, false, false),
          new GamePiece(6, 4, false, false, true, true, false, false),
          new GamePiece(7, 4, false, false, true, true, false, false),
          new GamePiece(8, 4, false, false, true, false, false, false)));

  ArrayList<GamePiece> col5 = new ArrayList<>(
      Arrays.asList(new GamePiece(0, 5, false, false, false, true, false, false),
          new GamePiece(1, 5, false, false, true, true, false, false),
          new GamePiece(2, 5, false, false, true, true, false, false),
          new GamePiece(3, 5, false, false, true, true, false, false),
          new GamePiece(4, 5, true, true, true, true, false, false),
          new GamePiece(5, 5, false, false, true, true, false, false),
          new GamePiece(6, 5, false, false, true, true, false, false),
          new GamePiece(7, 5, false, false, true, true, false, false),
          new GamePiece(8, 5, false, false, true, false, false, false)));

  ArrayList<GamePiece> col6 = new ArrayList<>(
      Arrays.asList(new GamePiece(0, 5, false, false, false, true, false, false),
          new GamePiece(1, 5, false, false, true, true, false, false),
          new GamePiece(2, 5, false, false, true, true, false, false),
          new GamePiece(3, 5, false, false, true, true, false, false),
          new GamePiece(4, 5, true, true, true, true, false, false),
          new GamePiece(5, 5, false, false, true, true, false, false),
          new GamePiece(6, 5, false, false, true, true, false, false),
          new GamePiece(7, 5, false, false, true, true, false, false),
          new GamePiece(8, 5, false, false, true, false, false, false)));

  ArrayList<GamePiece> col7 = new ArrayList<>(
      Arrays.asList(new GamePiece(0, 0, false, false, false, true, false, false),
          new GamePiece(1, 0, false, false, true, true, false, false),
          new GamePiece(2, 0, false, false, true, true, false, false),
          new GamePiece(3, 0, false, false, true, true, false, false),
          new GamePiece(4, 0, true, false, true, true, false, false),
          new GamePiece(5, 0, false, false, true, true, false, false),
          new GamePiece(6, 0, false, false, true, true, false, false),
          new GamePiece(7, 0, false, false, true, true, false, false),
          new GamePiece(8, 0, false, false, true, false, false, false)));

  ArrayList<ArrayList<GamePiece>> board1 = new ArrayList<ArrayList<GamePiece>>(Arrays.asList(
      this.col0, this.col1, this.col2, this.col3, this.col4, this.col5, this.col6, this.col7));

//displays the worldScene
  void testBigBang(Tester t) {
    LightEmAll world = new LightEmAll(40 * 8, 40 * 9, this.board1);
    int worldWidth = 950;
    int worldHeight = 550;
    world.bigBang(worldWidth, worldHeight);
  }
}
