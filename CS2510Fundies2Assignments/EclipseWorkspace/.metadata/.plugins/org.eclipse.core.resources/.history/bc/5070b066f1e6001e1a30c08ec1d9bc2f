import java.util.ArrayList;
//import tester.Tester;
import java.util.Collections;
import java.util.Comparator;

// to represent an tree
interface Tree {

  // gets the total value of a node
  public int calculateVal();

  /*
   * //does this string contain any letter not in the alphabet. 0 is false and 1
   * is true. ArrayList<Boolean> encode(String word);
   */
}

// to represent the Huffman class
class Huffman {
  ArrayList<String> letters;
  ArrayList<Integer> frequencies;

  Huffman(ArrayList<String> letters, ArrayList<Integer> frequencies) {
    if (letters.size() != frequencies.size()) {
      throw new IllegalArgumentException("lists are different lengths");
    }
    else {
      if (letters.size() < 2) {
        throw new IllegalArgumentException("length of list of strings < 2");
      }
      else {
        this.letters = letters;
        this.frequencies = frequencies;
      }
    }
    
    // to represent the current pairs
    ArrayList<Tree> pairs = new ArrayList<Tree>();

    // makes a list of pairs
    for (int i = 0; i < letters.size(); i = i + 1) {
      pairs.add(new Leaf(letters.get(i), frequencies.get(i)));
    }

    // sorts the list of pairs according to the frequency
    Collections.sort(pairs, new SortByFrequency());
  
    // to represent the current tree
    ArrayList<Tree> tree = new ArrayList<Tree>();
    //insert(currentPair, tree);
    
  // builds the forest
  while (pairs.size() > 0) {
    Tree currNode = new HuffmanNode(pairs.get(0).calculateVal() + pairs.get(1).calculateVal() , pairs.get(0), pairs.get(1));
    insert(currNode, pairs);
    pairs.remove(0);
    pairs.remove(0);
    }
  }
  
  // inserts 
  void insert(Tree currPair,  ArrayList<Tree> tree) {
    for(int i = 0; i < tree.size(); i = i + 1) {
      if (currPair.calculateVal() < tree.get(i + 1).calculateVal()) {
        tree.add(i, currPair);
        return;
      }
    }  
  }
}

// sorts the arrayList by frequency in ascending order
class SortByFrequency implements Comparator<Tree> {

  public int compare(Tree t1, Tree t2) {
    return t1.calculateVal() - t2.calculateVal();
  }
}

// to represent a single node
class HuffmanNode implements Tree {
  int total;
  Tree left;
  Tree right;

  HuffmanNode(int total, Tree left, Tree right) {
    total = this.calculateVal();
    this.left = left;
    this.right = right;
  }

  // gets the total value of a node
  public int calculateVal() {
    return this.left.calculateVal() + this.right.calculateVal();
  }
  
  
}

// to represent a leaf
class Leaf implements Tree {
  String data;
  int frequency;

  Leaf(String data, int frequency) {
    this.data = data;
    this.frequency = frequency;
  }

  // gets the total value of a node
  public int calculateVal() {
    return this.frequency;
  }

  // sorts the list according to the frequency
}

/*
 * // does this string contain any letter not in the alphabet. 0 is false and 1
 * is true. ArrayList<Boolean> encode(String word) { return this; }
 */
