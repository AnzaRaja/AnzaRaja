import java.util.ArrayList;
import java.util.Arrays;
import java.util.NoSuchElementException;

import tester.Tester;

//checks if source contains a sub-sequence of the integers in sequence. The 
//sub-sequence should contain the same numbers as sequence in the same order.
//may assume that neither list is null.
boolean containsSequence(ArrayList<Integer> source, ArrayList<Integer> sequence) {
  if (sequence.size() > source.size()) {
    return false;
  }
  for(int i = 0; i <= source.size(); i++) {
    boolean isSequence = true;
    
      for (int j = 0; j <= sequence.size(); j++) {
        if (!(source.get(i + j) == sequence.get(j)) && isSequence == true) {
          isSequence = false;
        }
      }
    if (isSequence) {
      return true;
    }
  }
  return false;
}

class Deque<T> {
Sentinel<T> header;
// Returns the number of items in this Deque (excluding the sentinel) int size();
// EFFECT: inserts the given value at the front of the Deque
void addToHead(T value) {
}
// EFFECT: inserts the given value at the back of the Deque
void addToTail(T value) {
}
// Returns the current first item of the Deque
// EFFECT: removes the current first item of the Deque
T removeFromHead() {
  return null;
}
// Returns the current last item of the Deque
// EFFECT: removes the current last item of the Deque
T removeFromTail() {
  return null;
}

// In Deque<T>
//append all the items of the given Deque onto the current 
//one and remove the items from that given Deque
void addAll(Deque<T> that) {
  int size = that.size();
  
  for (int i = 0; i < size; i++) {
    this.addToTail(that.removeFromHead());
   }
  }
}

class ANode<T> {
  ANode<T> next;
  ANode<T> prev;
}

class Sentinel<T> extends ANode<T> { 
  
} 

class Node<T> extends ANode<T> {
T data; 
}





//Produces a sequence of values of type T, one at a time
interface Iterator<T> {
//Does this sequence have at least one more value? 
  boolean hasNext() {
    
  }
  
//Get the next value in this sequence
//EFFECT: Advance the iterator to the subsequent value 
  T next() {
    
  }
}

//an Iterator that is given another Iterator when 
//constructed and iterates over every other
// element produced by the given iterator
class EveryOtherIter<T> implements Iterator<T> {
  Iterator<T> iter;
  
  EveryOtherIter(Iterator<T> iter) {
    this.iter = iter;
  }
  
  public boolean hasNext() {
    this.iter.hasNext();
  }
  
  public T next() {
    if (!hasNext()) {
      throw new NoSuchElementException("No more items");
    }
    //locally store the next element to return
    T curr = this.iter.next();
    //set up the next element(consumes this element)
    if (this.hasNext()) { //wrapper
      this.iter.next();
    }
    //return the locally stored element
    return curr;
  } 
}

class ExamplesArrayUtil {
ArrayList<Integer> oneThruFour = new ArrayList<>(Arrays.asList(1,2,3,4));
ArrayList< Integer> example1 = new ArrayList<> (Arrays. asList (11, 2, 6, 4, 10, 7));
ArrayList<Integer> example2 = new ArrayList<> (Arrays. asList (9, 8, 7, 6, 5));
ArrayList<Integer> example3 = new ArrayList<> (Arrays. asList (1, 3, 2, 1, 2));
ArrayList<String> str1 = new ArrayList<> (Arrays. asList ("hi", "bye", "no", "yes", "fun"));
ArrayList<String> str2 = new ArrayList<> (Arrays. asList ("pink", "cat", "dog", "fly", "run"));
ArrayList<ArrayList<String>> str3 = new ArrayList<>(Arrays.asList(str1, str2));

void testEveryOtherIter() {
  Iterator<Integer> iter = this.oneThruFour.iterator();
  EveryOtherIter<Integer> i = new EveryOtherIter<Integer>(iter);
  t.checkExpect(i.hasNext(), true);
  t.checkExpect(i.next(), 1);
  t.checkExpect(i.hasNext(), true);
  t.checkExpect(i.next(), 3);
  t.checkExpect(i.hasNext(), false);
 }
}



class EveryNthIter<T> implements Iterator<T> {
  Iterable<T> iter;
  int n;
  
  EveryNthIter(Iterable<T> iterable, int n) {
    this.iter = iterable.iterator();
    this.n = n;
  }
  
  public boolean hasNext() {
    this.iter.hasNext();
  }
  
  public T next() {
    if (!hasNext()) {
      throw new NoSuchElementException("No more items");
    }
    //locally store the next element to return
    T curr = this.iter.next();
    //set up the next element(consumes this element)
    for(int i = 1; i <= n && this.hasNext(); i++) {
        this.iter.next();
      
    }
    //return the locally stored element
    return curr;
  } 
}
