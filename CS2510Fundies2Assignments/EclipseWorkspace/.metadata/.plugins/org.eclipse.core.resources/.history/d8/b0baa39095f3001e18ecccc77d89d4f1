import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import tester.*;
import javalib.impworld.*;
import java.awt.Color;
import javalib.worldimages.*;

// represents a world class 
class MinesweeperWorld extends World {
  int rows;
  int columns;
  int mines;
  ArrayList<ArrayList<Cells>> board;

  Random random;

  MinesweeperWorld(int rows, int columns, int mines) {
    this.random = new Random();

    if (rows > 1) {
      this.rows = rows;
    }
    else {
      throw new IllegalArgumentException("rows have to be greater than 1");
    }
    if (columns > 1) {
      this.columns = columns;
    }
    else {
      throw new IllegalArgumentException("columns have to be greater than 1");
    }
    if (mines <= rows * columns) {
      this.mines = mines;
    }
    else {
      throw new IllegalArgumentException("can't have more mines than cells available");
    }
    this.board = new ArrayList<ArrayList<Cells>>();
    this.makeBoard();
    this.getNeighbor();

    ArrayList<Posn> mineList = randomMines(mines);
    this.addMines(mineList);

    this.updateNeighborMineNum();
  }

  // new constructor
  MinesweeperWorld(int rows, int columns, int mines, Random random) {
    this.rows = rows;
    this.columns = columns;
    this.mines = mines;
    this.random = random;

    this.board = new ArrayList<ArrayList<Cells>>();
    this.makeBoard();
    this.getNeighbor();
    ArrayList<Posn> mineList = randomMines(mines);
    this.addMines(mineList);
    this.makeScene();
    this.updateNeighborMineNum();
  }

  // draws the board
  public WorldScene makeScene() {
    WorldScene scene = new WorldScene(this.rows * 30, this.columns * 30);

    for (int r = 0; r < this.rows; r++) {
      for (int c = 0; c < this.columns; c++) {
        scene.placeImageXY(board.get(r).get(c).drawCells(), ((r * 30) + 15), ((c * 30) + 15));
        // placeImageXY(drawCells(), ((r * 30) + 15), ((c * 30) + 15));
      }
    }
    return scene;
  }

  /*
   * // returns the final scene public WorldScene makeAFinalScene() { return
   * this.makeScene(); }
   */

  public WorldScene lastScene(String msg) {
    // Create a scene to display the message
    WorldScene scene = new WorldScene(this.rows * 30, this.columns * 30);
    TextImage message = new TextImage(msg, 40, Color.red);
    
    for (int r = 0; r < this.rows; r++) {
      for (int c = 0; c < this.columns; c++) {
        scene.placeImageXY(board.get(r).get(c).drawCells(), ((r * 30) + 15), ((c * 30) + 15));
        // placeImageXY(drawCells(), ((r * 30) + 15), ((c * 30) + 15));
      }
    }
    scene.placeImageXY(message, (this.rows * 30) / 2, (this.columns * 30) / 2);
    return scene;

    /*
     * WorldScene scene = new WorldScene(this.rows * 30, this.columns * 30);
     * 
     * for (int r = 0; r < this.rows; r++) { for (int c = 0; c < this.columns; c++)
     * { scene.placeImageXY(board.get(r).get(c).drawCells(), ((r * 30) + 15), ((c *
     * 30) + 15)); // placeImageXY(drawCells(), ((r * 30) + 15), ((c * 30) + 15)); }
     * } return scene;
     */
  }

  // draws the starting board with the given rows and columns
  public void makeBoard() {
    // ArrayList<ArrayList<Cells>> board1 = new ArrayList<ArrayList<Cells>>();
    for (int i = 0; i < this.rows; i++) {
      ArrayList<Cells> curRow = new ArrayList<Cells>();
      for (int j = 0; j < this.columns; j++) {
        curRow.add(new Cells(false, new ArrayList<Cells>(), false, false, 0));
      }
      board.add(curRow);
    }
  }

  // determines the list of neighbors of this cell
  public void getNeighbor() {
    // return new ArrayList<Cells>(get()
    for (int i = 0; i < this.rows; i++) {
      for (int j = 0; j < this.columns; j++) {
        if (i != 0 && i != this.rows - 1 && j != 0 && j != this.columns - 1) { // not a t, b, l, r
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j + 1)); // gets top right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j - 1)); // gets top left
          board.get(i).get(j).updateCell(board.get(i + 1).get(j + 1)); // gets bottom right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j - 1)); // gets bottom left
        }

        if (i == 0 && j != 0 && j != this.columns - 1) { // is a top and not a left and not a right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j + 1)); // gets bottom right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j - 1)); // gets bottom left
        }

        // is a bottom and not a left and not a right
        if (i == this.rows - 1 && j != 0 && j != this.columns - 1) {

          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j + 1)); // gets top right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j - 1)); // gets top left
        }

        if (j == 0 && i != 0 && i != this.rows - 1) { // is a left and not a top and not a bottom
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j + 1)); // gets top right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j + 1)); // gets bottom right
        }

        // is a right and not a top and not a bottom
        if (j == this.columns - 1 && i != 0 && i != this.rows - 1) {
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i - 1).get(j - 1)); // gets top left
          board.get(i).get(j).updateCell(board.get(i + 1).get(j - 1)); // gets bottom left
        }

        if (i == 0 && j == 0) { // top and left
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j + 1)); // gets bottom right
        }

        if (i == 0 && j == this.columns - 1) { // top and right
          board.get(i).get(j).updateCell(board.get(i + 1).get(j)); // gets bottom
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i + 1).get(j - 1)); // gets bottom left
        }

        if (i == this.rows - 1 && j == 0) { // bottom and left
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i).get(j + 1)); // gets right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j + 1)); // gets top right
        }
        if (i == this.rows - 1 && j == this.columns - 1) { // bottom and right
          board.get(i).get(j).updateCell(board.get(i - 1).get(j)); // gets top
          board.get(i).get(j).updateCell(board.get(i).get(j - 1)); // gets left
          board.get(i).get(j).updateCell(board.get(i - 1).get(j - 1)); // gets top left
        }
      }
    }
  }

  // count the mines for each of the cells to update it
  public void updateNeighborMineNum() {
    Cells cell;
    for (int r = 0; r < this.rows; r++) {
      for (int c = 0; c < this.columns; c++) {
        cell = board.get(r).get(c);
        cell.neighborMineNum = cell.countMines();
      }
    }
  }

  // adds the mines to the board
  public void addMines(ArrayList<Posn> curMineList) {
    ArrayList<Posn> mineList = randomMines(mines);

    for (Posn coord : mineList) {
      board.get(coord.x).get(coord.y).makeMine();
    }
  }

  // random placement of mines
  public ArrayList<Posn> randomMines(int mines) {
    ArrayList<Posn> curMineList = new ArrayList<Posn>();
    while (curMineList.size() < mines) {
      int xposn = (int) (random.nextInt(this.rows));
      int yposn = (int) (random.nextInt(this.columns));
      Posn randPosn = new Posn(xposn, yposn);
      if (!curMineList.contains(randPosn)) {
        curMineList.add(randPosn);
      }
    }
    return curMineList;
  }

  // left-mouse-click handling to reveal cells
  public void onMouseClicked(Posn pos, String buttonName) {
    int xposn = (pos.x / 30);
    int yposn = (pos.y / 30);
    Cells cell = board.get(xposn).get(yposn);
    if (buttonName.equals("RightButton")) {
      if (!cell.isFlagged) {
        cell.flagCell();
      }
      else {
        cell.unflagCell();
      }
    }
    else if (buttonName.equals("LeftButton")) {
      if (cell.hasMine) {
        cell.revealCell();
        this.endOfWorld("You lost");
      }
      if (!(cell.isRevealed && !(cell.haveAFlag()))) {
        if (cell.isEmpty()) {
          cell.floodFill();
        }
      }
      cell.revealCell();
    }
  }

}

// represents the minesweeper interface
interface IMineSweeper {

}

// represents a cell
class Cells implements IMineSweeper {
  boolean hasMine;
  ArrayList<Cells> neighbors;
  boolean isFlagged;
  boolean isRevealed;
  int neighborMineNum;

  Cells(boolean hasMine, ArrayList<Cells> neighbors, boolean isFlagged, boolean isRevealed,
      int neighborMineNum) {
    this.hasMine = hasMine;
    this.neighbors = new ArrayList<Cells>();
    this.isFlagged = isFlagged;
    this.isRevealed = isRevealed;
    this.neighborMineNum = this.countMines();

  }

  // updates the list of neighbors
  public void updateCell(Cells curCell) {
    this.neighbors.add(curCell);
  }

  // marks the cell as having a mine
  public void makeMine() {
    this.hasMine = true;
  }

  // marks the cell as having a flag
  public void flagCell() {
    this.isFlagged = true;
  }

  // marks the cell as not having a flag
  public void unflagCell() {
    this.isFlagged = false;
  }

  // reveals this cell
  public void revealCell() {
    this.isRevealed = true;
  }

  // count the number of mines neighboring a particular cell
  public int countMines() {
    int curMineCount = 0;
    for (Cells c : this.neighbors) {
      if (c.haveAMine()) {
        curMineCount += 1;
      }
    }
    return curMineCount;
  }

  // does this cell have a mine
  public boolean haveAMine() {
    return this.hasMine;
  }

  // does this cell have a mine
  public boolean haveAFlag() {
    return this.isFlagged;
  }

  public WorldImage drawCells() {
    // draws the mine as an image
    WorldImage mineImage = new OverlayImage(
        new OverlayImage(
            new OverlayImage(new CircleImage(8, OutlineMode.SOLID, Color.black),
                new StarImage(12, OutlineMode.SOLID, Color.black)),
            new RotateImage(new StarImage(12, OutlineMode.SOLID, Color.black), 45)),
        new RectangleImage(30, 30, "outline", Color.black));

    // draws the flag as an image (doesn't implement this yet)
    WorldImage flagCell = new OverlayImage(new RectangleImage(30, 30, "outline", Color.black),
        new OverlayOffsetImage(
            new RotateImage(new EquilateralTriangleImage(13, OutlineMode.SOLID, Color.red), 85), -3,
            7, new RectangleImage(2, 20, OutlineMode.SOLID, Color.black)));

    // draws a blank cell
    WorldImage blankCell = new RectangleImage(30, 30, "outline", Color.black);

    // draws number of neighbors as text
    WorldImage mineCount = new TextImage(Integer.toString(this.neighborMineNum), 25, FontStyle.BOLD,
        Color.black);

    // draws a cell with the number of neighbors that have mines
    WorldImage revealNeigbors = new OverlayImage(mineCount,
        new RectangleImage(30, 30, "solid", Color.lightGray));

    if (this.hasMine && this.isRevealed) {
      return mineImage;
    }
    else if (this.isFlagged && !(this.isRevealed)) {
      return flagCell;
    }
    else if (this.isRevealed && !(this.hasMine)) {
      return revealNeigbors;
    }
    else {
      return blankCell;
    }
  }

  // is empty helper: true if neighborMineNum is 0 and this cell is not a mine
  public boolean isEmpty() {
    return this.neighborMineNum == 0 && !(this.hasMine);
  }

  // implements the flood fill effect
  public void floodFill() {
    if (this.isEmpty() && !(this.isRevealed)) {
      this.isRevealed = true;
      for (int i = 0; i < this.neighbors.size(); i++) {
        this.neighbors.get(i).floodFill();
      }
    }
    else if (!this.hasMine) {
      this.isRevealed = true;
    }
  }
}

// examples class
class MineSweeperExamples {

  ArrayList<Cells> row;
  ArrayList<Cells> col;

  Random rand1 = new Random(1);
  Random rand2 = new Random(2);

  MinesweeperWorld board1;
  MinesweeperWorld board2;
  MinesweeperWorld board3;
  MinesweeperWorld board4;

  // 2x2 board with different number of mines
  MinesweeperWorld board5 = new MinesweeperWorld(2, 2, 1, rand1);
  MinesweeperWorld board6 = new MinesweeperWorld(2, 2, 2, rand2);
  MinesweeperWorld board7 = new MinesweeperWorld(2, 2, 3, rand1);
  MinesweeperWorld board8 = new MinesweeperWorld(2, 2, 4, rand1);
  MinesweeperWorld board9 = new MinesweeperWorld(2, 2, 0, rand1);

  Cells cell1 = new Cells(false, new ArrayList<Cells>(), false, false, 0);
  Cells cell2 = new Cells(false, new ArrayList<Cells>(), false, false, 0);
  Cells cell3 = new Cells(false, new ArrayList<Cells>(), false, false, 0);
  Cells cell4 = new Cells(false, new ArrayList<Cells>(), false, false, 0);
  Cells cell5 = new Cells(true, new ArrayList<Cells>(), false, true, 0);
  Cells cell6 = new Cells(true, new ArrayList<Cells>(), false, false, 0);
  Cells cell7 = new Cells(true, new ArrayList<Cells>(), false, true, 0);
  Cells cell8 = new Cells(false, new ArrayList<Cells>(), true, false, 0);
  Cells cell9 = new Cells(false, new ArrayList<Cells>(), true, false, 0);
  Cells cell10 = new Cells(false, new ArrayList<Cells>(), true, false, 1);
  Cells drawCell1 = new Cells(false, new ArrayList<Cells>(), false, false, 0);
  Cells drawCell2 = new Cells(false, new ArrayList<Cells>(), false, false, 0);
  Cells cell11 = new Cells(false, new ArrayList<Cells>(), false, false, 0);
  Cells cell12 = new Cells(true, new ArrayList<Cells>(), false, false, 0);

  Random rand3;
  Random rand4;
  Random rand5;

  public void initTestConditions() {
    this.row = new ArrayList<Cells>();
    this.col = new ArrayList<Cells>();
    board1 = new MinesweeperWorld(6, 6, 3);
    board2 = new MinesweeperWorld(30, 16, 40);
    board3 = new MinesweeperWorld(10, 12, 3);
    board4 = new MinesweeperWorld(2, 2, 0);
    board8 = new MinesweeperWorld(2, 2, 4, rand1);
    board9 = new MinesweeperWorld(2, 2, 0, rand1);

    this.board1.makeBoard();

    // MinesweeperWorld minesweeper1 = new MinesweeperWorld(2, 2, 1, rand1);

    // updates cell
    cell1.updateCell(cell2);
    cell1.updateCell(cell3);

    // makeMine
    cell6.makeMine();
    cell7.makeMine();
    cell8.flagCell();
    cell9.flagCell();
    cell11.revealCell();
    cell12.revealCell();
  }

  // testing makeBoard
  boolean testMakeBoard(Tester t) {
    initTestConditions();
    // t.checkExpect(board1.board.size(), 5)
    return t.checkExpect(board1.rows, 6) && t.checkExpect(board2.columns, 16)
        && t.checkExpect(board3.rows, 10) && t.checkExpect(board3.columns, 12);
  }

  // testing get neighbor
  boolean testGetNeighbor(Tester t) {
    initTestConditions();
    // testing 2x2 board
    // top left's neighbors
    return t.checkExpect(board4.board.get(0).get(0).neighbors,
        new ArrayList<Cells>(Arrays.asList(board4.board.get(0).get(1), board4.board.get(1).get(0),
            board4.board.get(1).get(1))))
        // top right's neighbors
        && t.checkExpect(board4.board.get(0).get(1).neighbors,
            new ArrayList<Cells>(Arrays.asList(board4.board.get(0).get(0),
                board4.board.get(1).get(0), board4.board.get(1).get(1))))
        // bottom left
        && t.checkExpect(board4.board.get(1).get(0).neighbors,
            new ArrayList<Cells>(Arrays.asList(board4.board.get(0).get(0),
                board4.board.get(0).get(1), board4.board.get(1).get(1))))
        // bottom right
        && t.checkExpect(board4.board.get(1).get(1).neighbors,
            new ArrayList<Cells>(Arrays.asList(board4.board.get(0).get(0),
                board4.board.get(1).get(0), board4.board.get(0).get(1))));
  }

  // test IllegalArgumentException
  boolean testCheckException(Tester t) {
    return t.checkConstructorException(
        new IllegalArgumentException("rows have to be greater than 1"), "MinesweeperWorld", 1, 6, 3)
        && t.checkConstructorException(
            new IllegalArgumentException("columns have to be greater than 1"), "MinesweeperWorld",
            4, 1, 3)
        && t.checkConstructorException(
            new IllegalArgumentException("can't have more mines than cells available"),
            "MinesweeperWorld", 4, 4, 20);
  }

  // test for makeMine
  boolean testMakeMine(Tester t) {
    initTestConditions();
    return t.checkExpect(this.cell1.hasMine, false) && t.checkExpect(this.cell3.hasMine, false)
        && t.checkExpect(this.cell4.hasMine, false) && t.checkExpect(this.cell6.hasMine, true)
        && t.checkExpect(this.cell7.hasMine, true);
  }

  // test for flagCell
  boolean testFlagCell(Tester t) {
    initTestConditions();
    // cell1.makeMine();
    return t.checkExpect(this.cell8.isFlagged, true) && t.checkExpect(this.cell2.hasMine, false)
        && t.checkExpect(this.cell9.isFlagged, true) && t.checkExpect(this.cell3.hasMine, false)
        && t.checkExpect(this.cell1.hasMine, false);
  }

  // test for revealCell
  boolean testRevealCell(Tester t) {
    initTestConditions();
    return t.checkExpect(this.cell10.isRevealed, false)
        && t.checkExpect(this.cell9.isRevealed, false)
        && t.checkExpect(this.cell11.isRevealed, true)
        && t.checkExpect(this.cell12.isRevealed, true);
  }

  // test for addMines
  void testAddMines(Tester t) {
    this.initTestConditions();
    MinesweeperWorld world = new MinesweeperWorld(3, 3, 0);
    ArrayList<Posn> minePositions = new ArrayList<>(
        Arrays.asList(new Posn(0, 0), new Posn(1, 1), new Posn(2, 2)));
    world.addMines(minePositions);

    t.checkExpect(world.board.get(0).get(0).hasMine, false);
    t.checkExpect(world.board.get(1).get(1).hasMine, false);
    t.checkExpect(world.board.get(2).get(2).hasMine, false);
  }

  // test for randomMines
  /*
   * boolean testRandomMines(Tester t) { initTestConditions(); return
   * t.checkExpect(randomMines(2), ); }
   */

  // test for haveAMine
  boolean testHaveAMine(Tester t) {
    initTestConditions();
    return t.checkExpect(this.cell1.haveAMine(), false)
        && t.checkExpect(this.cell2.haveAMine(), false)
        && t.checkExpect(this.cell3.haveAMine(), false)
        && t.checkExpect(this.cell4.haveAMine(), false)
        && t.checkExpect(this.cell5.haveAMine(), true)
        && t.checkExpect(this.cell6.haveAMine(), true)
        && t.checkExpect(this.cell7.haveAMine(), true);
  }

  // test for countMines
  void testCountMines(Tester t) {
    this.initTestConditions();
    this.rand1 = new Random(1);
    t.checkExpect(board5.board.get(0).get(0).countMines(), 0);
    t.checkExpect(board6.board.get(1).get(1).countMines(), 1);
    t.checkExpect(board7.board.get(0).get(1).countMines(), 3);
    t.checkExpect(board8.board.get(1).get(1).countMines(), 3);
    t.checkExpect(board9.board.get(1).get(1).countMines(), 0);
  }

  // test updateCell
  void testUpdateCell(Tester t) {
    // this.cell1.updateCell(cell2);
    Cells c1 = new Cells(false, new ArrayList<Cells>(), false, false, 0);
    Cells c2 = new Cells(false,
        new ArrayList<Cells>(
            Arrays.asList(new Cells(false, new ArrayList<Cells>(), false, false, 0))),
        false, false, 0);
    t.checkExpect(c1.neighbors.size(), 0);
    c1.updateCell(c2);
    t.checkExpect(c1.neighbors.size(), 1);
    t.checkExpect(c2.neighbors.size(), 0);
  }

  // test for drawCells
  boolean testDrawCells(Tester t) {
    initTestConditions();
    return t.checkExpect(drawCell1.drawCells(), new RectangleImage(30, 30, "outline", Color.black))
        && t.checkExpect(drawCell2.drawCells(), new RectangleImage(30, 30, "outline", Color.black))
        && t.checkExpect(cell5.drawCells(),
            new OverlayImage(
                new OverlayImage(
                    new OverlayImage(new CircleImage(8, OutlineMode.SOLID, Color.black),
                        new StarImage(12, OutlineMode.SOLID, Color.black)),
                    new RotateImage(new StarImage(12, OutlineMode.SOLID, Color.black), 45)),
                new RectangleImage(30, 30, "outline", Color.black)))
        && t.checkExpect(cell7.drawCells(),
            new OverlayImage(
                new OverlayImage(
                    new OverlayImage(new CircleImage(8, OutlineMode.SOLID, Color.black),
                        new StarImage(12, OutlineMode.SOLID, Color.black)),
                    new RotateImage(new StarImage(12, OutlineMode.SOLID, Color.black), 45)),
                new RectangleImage(30, 30, "outline", Color.black)))
        && t.checkExpect(cell8.drawCells(), new OverlayImage(
            new RectangleImage(30, 30, "outline", Color.black),
            new OverlayOffsetImage(
                new RotateImage(new EquilateralTriangleImage(13, OutlineMode.SOLID, Color.red), 85),
                -3, 7, new RectangleImage(2, 20, OutlineMode.SOLID, Color.black))));
  }

  // test for makeScene
  /*
   * boolean testMakeScene(Tester t) { initTestConditions(); return
   * t.checkExpect(board8.makeScene(), ); }
   */

  // test for onMouseClicked

  // test for isEmpty
  boolean testIsEmpty(Tester t) {
    initTestConditions();
    return t.checkExpect(cell1.isEmpty(), true) && t.checkExpect(cell2.isEmpty(), true)
        && t.checkExpect(cell3.isEmpty(), true) && t.checkExpect(cell4.isEmpty(), true)
        && t.checkExpect(cell5.isEmpty(), false) && t.checkExpect(cell6.isEmpty(), false)
        && t.checkExpect(cell8.isEmpty(), true) && t.checkExpect(cell10.isEmpty(), true);
  }

  // test for floodFill
  void testFloodFill(Tester t) {
    initTestConditions();
    cell1.floodFill();
    cell2.floodFill();
    cell3.floodFill();
    cell4.floodFill();
    t.checkExpect(cell1.isRevealed, true);
    t.checkExpect(cell2.isRevealed, true);
    t.checkExpect(cell3.isRevealed, true);
    t.checkExpect(cell4.isRevealed, true);
  }

  // test for haveAFlag
  boolean testhaveAFlag(Tester t) {
    initTestConditions();
    return t.checkExpect(cell1.haveAFlag(), false) && t.checkExpect(cell5.haveAFlag(), false)
        && t.checkExpect(cell7.haveAFlag(), false) && t.checkExpect(cell8.haveAFlag(), true)
        && t.checkExpect(cell9.haveAFlag(), true);
  }

  // test for makeFinalScene

  // displays the worldScene
  void testBigBang(Tester t) {
    MinesweeperWorld world = new MinesweeperWorld(12, 15, 9);
    int worldWidth = 400;
    int worldHeight = 500;
    world.bigBang(worldWidth, worldHeight);
  }
}
