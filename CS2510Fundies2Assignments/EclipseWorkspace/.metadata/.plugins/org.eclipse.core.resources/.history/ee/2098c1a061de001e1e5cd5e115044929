import tester.Tester;

class Course implements registrar {
  String name;
  Instructor prof;
  IList<Student> student;

  Course(String name, Instructor prof, IList<Student> student) {
    this.name = name;
    this.prof = prof;
    this.student = student;
  }
}

class Instructor implements registrar {
  String name;
  IList<Course> course;

  Instructor(String name, IList<Course> courses) {
    this.name = name;
    this.course = courses;
  }
}

class Student implements registrar {
  String name;
  int id;
  IList<Course> course;

  Student(String name, int id, IList<Course> course) {
    this.name = name;
    this.id = id;
    this.course = course;
  }
}

interface registrar {
  void enroll(Course c);
}

interface IList<T> {

}

class MtList<T> implements IList<T> {
  MtList() {
  }
}

class ConsList<T> implements IList<T> {
  T first;
  IList<T> rest;

  ConsList(T first, IList<T> rest) {
    this.first = first;
    this.rest = rest;
  }
}

//examples for the class that represents courses
class examplesCourse {
  Student jane = new Student("Jane", 123456, this.csClasses);
  Student alicia = new Student("Alicia", 789101, this.csClasses);
  Student max = new Student("Max", 112131, this.csClasses);
  Student valerie = new Student("Valerie", 415161, this.csClasses);
  Student hari = new Student("Hari", 718192, this.csClasses);
  Student josh = new Student("Josh", 021222, this.businessClasses);
  Student ashley = new Student("Ashley", 324252, this.businessClasses);
  Student devan = new Student("Devan", 627282, this.starterCsClasses);
  Student alex = new Student("Alex", 930313, this.starterCsClasses);
  Student will = new Student("Will", 233343, this.bisClass);

  IList<Course> mtCourse = new MtList<Course>();
  IList<Student> mtStudent = new MtList<Student>();

  IList<Student> csStudents = new ConsList<Student>(this.jane,
      new ConsList<Student>(this.alicia,
          new ConsList<Student>(this.max, new ConsList<Student>(this.valerie,
              new ConsList<Student>(this.hari, new MtList<Student>())))));

  IList<Student> starterCsStudents = new ConsList<Student>(this.devan,
      new ConsList<Student>(this.alex,
          new ConsList<Student>(this.jane, new ConsList<Student>(this.alicia,
              new ConsList<Student>(this.max, new MtList<Student>())))));

  IList<Student> businessStudents = new ConsList<Student>(this.josh,
      new ConsList<Student>(this.ashley, new MtList<Student>()));
  
  IList<Student> busStudents = new ConsList<Student>(this.will, new MtList<Student>());

  // cs classes
  Course fundies1 = new Course("Fundies1", this.ferd, this.csStudents);
  Course fundies2 = new Course("Fundies2", this.lerner, this.csStudents);
  Course ood = new Course("Object Oriented Design", this.lerner, this.csStudents);
  Course algo = new Course("Algorithms", this.park, this.csStudents);
  
  IList<Course> csClasses = new ConsList<Course>(this.fundies1, new ConsList<Course>(this.fundies2,
      new ConsList<Course>(this.ood, new ConsList<Course>(this.algo, this.mtCourse))));

  IList<Course> starterCsClasses = new ConsList<Course>(this.fundies1,
      new ConsList<Course>(this.fundies2, new ConsList<Course>(this.ood, this.mtCourse)));

  // business classes
  Course acct1201 = new Course("Financial Accounting", this.xiao, this.businessStudents);
  Course acct1203 = new Course("Financial Accounting", this.xiao, this.businessStudents);
  Course intb = new Course("International Business", this.miller, this.businessStudents);
  Course busCalc = new Course("Business Calc", this.smith, this.busStudents);
  
  IList<Course> businessClasses = new ConsList<Course>(this.acct1201,
      new ConsList<Course>(this.acct1203, new ConsList<Course>(this.intb, this.mtCourse)));
  IList<Course> bisClass = new ConsList<Course>(this.busCalc, this.mtCourse);

  Instructor ferd = new Instructor("Ferdinand", csClasses);
  Instructor lerner = new Instructor("Lerner", csClasses);
  Instructor park = new Instructor("Park", csClasses);
  Instructor razzaq = new Instructor("Razzaq", csClasses);
  Instructor xiao = new Instructor("Xiao", businessClasses);
  Instructor smith = new Instructor("Smith", businessClasses);
  Instructor miller = new Instructor("Miller", businessClasses);
  
  // tests for classmates
  boolean testClassmates(Tester t) {
    return t.checkExpect(this.jane.classmates(this.josh), false)
        && t.checkExpect(this.jane.classmates(this.max), true)
        && t.checkExpect(this.ashley.classmates(this.josh), true); 
  }
  
  //tests for dejavu
  boolean testDejavu(Tester t) {
      return t.checkExpect(this.ferd.dejavu(this.mia), true)
          && t.checkExpect(this.lerner.dejavu(this.alex), false)
          && t.checkExpect(this.xiao.dejavu(this.haley), true)
          && t.checkExpect(this.smith.dejavu(this.haley), false);
      
    
}
