
import tester.Tester;
import javalib.funworld.WorldScene;

//represents a list of words
interface ILoWord {

  // produces a new list, with words sorted in alphabetical order,
  // treating all Strings as if they were given in all lower case.
  ILoWord sort();

  // determines whether this list of IWords has words sorted in alphabetical
  // order,
  // in a case-insensitive way.
  boolean isSorted();

  // takes this list of IWords and a given list of IWords, and produces a list
  // where the first,
  // third, fifth... elements are from this list, and the second, fourth, sixth...
  // elements
  // are from the given list.
  ILoWord interleave(ILoWord IWords);

  // merges this sorted list of IWords and a given sorted list of IWords, and
  // produces a sorted
  // list of IWords that contains all items in both original lists, including
  // duplicates, treating
  // all Strings as if they were given in all lower case.
  ILoWord merge(ILoWord IWords);

  // takes in a String of length 1 and produces an ILoWord where any active words
  // in this ILoWord
  // are reduced by removing the first letter only if the given string matches the
  // first letter.
  ILoWord checkAndReduce(String letter);

  // takes in an IWord and produces an ILoWord that is like this ILoWord but with
  // the given
  // IWord added at the end.
  ILoWord addToEnd(IWord IWord);

  // produces an ILoWord with any IWords that have an empty string are filtered
  // out.
  ILoWord filterOutEmpties();

  // takes in a WorldScene and draws all of the words in this ILoWord onto the
  // given WorldScene
  WorldScene draw(WorldScene WorldScene);

}

//represents an empty list of words
class MtLoWord implements ILoWord {

  /*- TEMPLATE
  FIELDS:
  
  METHODS
  ... this.sort() ...                                -- ILoWord
  ... this.isSorted() ...                            -- boolean
  ... this.interleave.(ILoWord IWords) ...           -- ILoWord
  ... this.merge(ILoWord IWords) ...                 -- ILoWord
  ... this.checkAndReduce(String letter) ...         -- ILoWord
  ... this.addToEnd(Word IWord) ...                  -- ILoWord
  ... this.filterOutEmpties() ...                    -- ILoWord
  ... this.draw(WorldScene WorldScene) ...           -- WorldScene
  */

  // produces a new list, with words sorted in alphabetical order,
  // treating all Strings as if they were given in all lower case.
  public ILoWord sort() {
    return this;
  }

  // determines whether this list of IWords has words sorted in alphabetical
  // order,
  // in a case-insensitive way.
  public boolean isSorted() {
    return true;
  }

  // takes this list of IWords and a given list of IWords, and produces a list
  // where the first,
  // third, fifth... elements are from this list, and the second, fourth, sixth...
  // elements
  // are from the given list.
  public ILoWord interleave(ILoWord IWords) {
    return this;
  }

  // merges this sorted list of IWords and a given sorted list of IWords, and
  // produces a sorted
  // list of IWords that contains all items in both original lists, including
  // duplicates, treating
  // all Strings as if they were given in all lower case.
  public ILoWord merge(ILoWord IWords) {
    return this;
  }

  // takes in a String of length 1 and produces an ILoWord where any active words
  // in this ILoWord
  // are reduced by removing the first letter only if the given string matches the
  // first letter.
  public ILoWord checkAndReduce(String letter) {
    return this;
  }

  // takes in an IWord and produces an ILoWord that is like this ILoWord but with
  // the given
  // IWord added at the end.
  public ILoWord addToEnd(IWord IWord) {
    return this;
  }

  // produces an ILoWord with any IWords that have an empty string are filtered
  // out.
  public ILoWord filterOutEmpties() {
    return this;
  }

  // takes in a WorldScene and draws all of the words in this ILoWord onto the
  // given WorldScene

  public WorldScene draw(WorldScene WorldScene) {
    return new WorldScene(20, 20);
  }

}

class ConsLoWord implements ILoWord {
  IWord first;
  ILoWord rest;

  ConsLoWord(IWord first, ILoWord rest) {
    this.first = first;
    this.rest = rest;
  }

  /*- TEMPLATE
  FIELDS:
  ... this.first ...                   -- IWord
  ... this.rest ...                    -- ILoWord
  
  METHODS
  ... this.sort() ...                                -- ILoWord
  ... this.isSorted() ...                            -- boolean
  ... this.interleave.(ILoWord IWords) ...           -- ILoWord
  ... this.merge(ILoWord IWords) ...                 -- ILoWord
  ... this.checkAndReduce(String letter) ...         -- ILoWord
  ... this.addToEnd(Word IWord) ...                  -- ILoWord
  ... this.filterOutEmpties() ...                    -- ILoWord
  ... this.draw(WorldScene WorldScene) ...           -- WorldScene
  */

  // produces a new list, with words sorted in alphabetical order,
  // treating all Strings as if they were given in all lower case.
  public ILoWord sort() {
    return this;
  }

  // determines whether this list of IWords has words sorted in alphabetical
  // order,
  // in a case-insensitive way.
  public boolean isSorted() {
    return false;
  }

  // takes this list of IWords and a given list of IWords, and produces a list
  // where the first,
  // third, fifth... elements are from this list, and the second, fourth, sixth...
  // elements
  // are from the given list.
  public ILoWord interleave(ILoWord IWords) {
    return this;
  }

  // merges this sorted list of IWords and a given sorted list of IWords, and
  // produces a sorted
  // list of IWords that contains all items in both original lists, including
  // duplicates, treating
  // all Strings as if they were given in all lower case.
  public ILoWord merge(ILoWord IWords) {
    return this;
  }

  // takes in a String of length 1 and produces an ILoWord where any active words
  // in this ILoWord
  // are reduced by removing the first letter only if the given string matches the
  // first letter.
  public ILoWord checkAndReduce(String letter) {
    return this;
  }

  // takes in an IWord and produces an ILoWord that is like this ILoWord but with
  // the given
  // IWord added at the end.
  public ILoWord addToEnd(IWord IWord) {
    return this;
  }

  // produces an ILoWord with any IWords that have an empty string are filtered
  // out.
  public ILoWord filterOutEmpties() {
    return this;
  }

  // takes in a WorldScene and draws all of the words in this ILoWord onto the
  // given WorldScene
  public WorldScene draw(WorldScene WorldScene) {
    return new WorldScene(20, 20);
  }

}

//represents a word in the ZType game
interface IWord {

}

//represents an active word in the ZType game
class ActiveWord implements IWord {
  String word;
  int x;
  int y;

  ActiveWord(String word, int x, int y) {
    this.word = word;
    this.x = x;
    this.y = y;
  }

}

//represents an inactive word in the ZType game
class InactiveWord implements IWord {
  String word;
  int x;
  int y;

  InactiveWord(String word, int x, int y) {
    this.word = word;
    this.x = x;
    this.y = y;
  }

}

//all examples and tests for ILoWord
class ExamplesWordLists {
  ExamplesWordLists() {

  }

  // IWords
  IWord butterfly = new ActiveWord("butterfly", 1, 1);
  IWord ant = new ActiveWord("ant", 1, 1);
  IWord bee = new ActiveWord("bee", 1, 1);
  IWord ladybug = new ActiveWord("ladybug", 1, 1);

  IWord cake = new ActiveWord("cake", 1, 1);
  IWord yoghurt = new ActiveWord("yoghurt", 1, 1);
  IWord pudding = new ActiveWord("pudding", 1, 1);
  IWord pie = new ActiveWord("pie", 1, 1);

  IWord rhino = new ActiveWord("rhino", 1, 1);
  IWord giraffe = new ActiveWord("giraffe", 1, 1);
  IWord lion = new ActiveWord("lion", 1, 1);
  IWord zebra = new ActiveWord("zebra", 1, 1);
  IWord crocodile = new ActiveWord("crocodile", 1, 1);
  IWord buffalo = new ActiveWord("buffalo", 1, 1);

  IWord red = new ActiveWord("red", 1, 1);
  IWord orange = new ActiveWord("orange", 1, 1);
  IWord green = new ActiveWord("green", 1, 1);
  IWord yellow = new ActiveWord("Yellow", 1, 1);
  IWord purple = new ActiveWord("Purple", 1, 1);
  

  IWord sam = new ActiveWord("Sam", 1, 1);
  IWord kate = new ActiveWord("Kate", 1, 1);
  IWord alison = new ActiveWord("Alison", 1, 1);
  IWord jake = new ActiveWord("Jake", 1, 1);
  IWord izzy = new ActiveWord("Izzy", 1, 1);
  IWord lara = new ActiveWord("Lara", 1, 1);
  IWord dan = new ActiveWord("Dan", 1, 1);
  IWord viki = new ActiveWord("Viki", 1, 1);

  ILoWord mtList = new MtLoWord();

  ILoWord list1 = new ConsLoWord(this.butterfly, new ConsLoWord(this.ant,
      new ConsLoWord(this.bee, new ConsLoWord(this.ladybug, this.mtList))));

  ILoWord list2 = new ConsLoWord(this.cake, new ConsLoWord(this.yoghurt,
      new ConsLoWord(this.pudding, new ConsLoWord(this.pie, this.mtList))));

  ILoWord list3 = new ConsLoWord(this.rhino,
      new ConsLoWord(this.giraffe, new ConsLoWord(this.lion, new ConsLoWord(zebra,
          new ConsLoWord(this.crocodile, new ConsLoWord(this.buffalo, this.mtList))))));
  
  ILoWord list4 = new ConsLoWord(this.red, new ConsLoWord(this.orange, 
      new ConsLoWord(this.yellow, this.mtList)));
  
  ILoWord list5 = new ConsLoWord(this.yellow, new ConsLoWord(this.purple, 
      new ConsLoWord(this.yellow, this.mtList)));
  
  ILoWord list6 = new ConsLoWord(this.red, new ConsLoWord(this.yellow, 
      new ConsLoWord(this.purple, this.mtList)));

  ILoWord list7 = new ConsLoWord(this.sam,
      new ConsLoWord(this.kate, new ConsLoWord(this.alison, this.mtList)));

  ILoWord list8 = new ConsLoWord(this.kate,
      new ConsLoWord(this.alison,
          new ConsLoWord(this.jake, new ConsLoWord(this.izzy, new ConsLoWord(this.lara,
              new ConsLoWord(this.dan, new ConsLoWord(this.viki, this.mtList)))))));
  
  ILoWord list9 = new ConsLoWord(this.cake,
      new ConsLoWord(this.pie, new ConsLoWord(this.cake, this.mtList)));
  
  ILoWord list10 = new ConsLoWord(this.cake,
      new ConsLoWord(this.pie, new ConsLoWord(this.cake, new ConsLoWord(this.pie, 
          new ConsLoWord(this.pudding, this.mtList)))));
  
  //test the method sort
  boolean testSort(Tester t) {
    return t.checkExpect(this.list1.sort(), new ConsLoWord(this.ant, new ConsLoWord(this.bee, 
        new ConsLoWord(this.butterfly, new ConsLoWord(this.ladybug, this.mtList))))) //unsorted, un-repeated lower case list
        && t.checkExpect(this.list6.sort(), new ConsLoWord(this.purple, new ConsLoWord(this.red, 
            new ConsLoWord(this.yellow, this.mtList)))) //unsorted lower and upper case, un-repeated list
        && t.checkExpect(this.list5.sort(), new ConsLoWord(this.purple, new ConsLoWord(this.yellow, 
            new ConsLoWord(this.yellow, this.mtList)))) //unsorted all upper case list with repeated string
        && t.checkExpect(this.list9, new ConsLoWord(this.cake, new ConsLoWord(this.cake, 
            new ConsLoWord(this.pie,  this.mtList)))) // unsorted all lower case with 1 repeated string
        && t.checkExpect(this.list10, new ConsLoWord(this.cake, new ConsLoWord(this.cake, 
            new ConsLoWord(this.pie, new ConsLoWord(this.pudding, this.mtList))))) // unsorted all lower case with 1 repeated string
  }
}
