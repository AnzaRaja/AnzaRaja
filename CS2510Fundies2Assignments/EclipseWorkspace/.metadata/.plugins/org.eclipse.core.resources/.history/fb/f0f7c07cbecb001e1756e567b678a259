import tester.Tester;

class Switcheroo {
  int value;

  Switcheroo(int value) {
    this.value = value;
  }

  Switcheroo choose(Switcheroo that, Switcheroo other) {
    if (this.value < that.value) {
      return other.choose(this, that);
    }
    else if (that.value > other.value) {
      return that.choose(other, new Switcheroo(this.value + 1));
    }
    else {
      return new Switcheroo(this.value * 10);
    }
  }
}

class ExamplesSwitcheroo {
  Switcheroo s1 = new Switcheroo(20);
  Switcheroo s2 = new Switcheroo(16);
  Switcheroo s3 = new Switcheroo(2510);

  boolean testSwitcheroo(Tester t) {
    return t.checkExpect(this.s3.choose(this.s1, this.s2),
        this.s1.choose(this.s2, new Switcheroo(2511)));
  }
}

interface ILoInt {
  int dotProduct(ILoInt that);

  int dotProductHelp(int val, ILoInt thisRest);

}

class MtLoInt implements ILoInt {
  MtLoInt() {
  }

  // compute the dot product of this and that
  public int dotProduct(ILoInt that) {
    return 0;
  }

  public int dotProductHelp(int val, ILoInt thisRest) {
    return 0;
  }
}

class ConsLoInt implements ILoInt {
  int first;
  ILoInt rest;

  ConsLoInt(int first, ILoInt rest) {
    this.first = first;
    this.rest = rest;
  }

//compute the dot product of this and that
  public int dotProduct(ILoInt that) {
    return that.dotProductHelp(this.first, this.rest);
  }

  public int dotProductHelp(int val, ILoInt thisRest) {
    return val * this.first + thisRest.dotProduct(this.rest);
  }
}

interface IAT {

  boolean containsNames(String name);
  
  boolean duplicateNames();

  //boolean stringEqual(IAT name);
  boolean stringEqualsName(String name);
}

class Unknown implements IAT {

  // returns true if anyone in this ancestry tree has the same name as one of
  // their ancestors
  public boolean containsNames(String name) {
    return false;
  }
  
  //returns true if anyone in this ancestry tree has the same name as one of their ancestors.
  public boolean duplicateNames() {
    return false;
  }

  public boolean stringEqualsName(String name) {
    return false;
  }
}

class Person implements IAT {
  String name;
  IAT dad, mom;

  Person(String name, IAT dad, IAT mom) {
    this.name = name;
    this.dad = dad;
    this.mom = mom;
  }

  // returns true if anyone in this ancestry tree has the same name as one of
  // their ancestors
  public boolean containsNames(String name) {
    return this.name.equals(name) 
        || this.dad.containsNames(name)
        || this.mom.containsNames(name);
  }
  
  //returns true if anyone in this ancestry tree has the same name as one of their ancestors.
  public boolean duplicateNames() {
    return //this.mom.stringEqualsName(this.name)
       // || this.dad.stringEqualsName(this.name)
         this.mom.equals(this.dad);
       // || this.name.equals(this.mom)
       // || this.dad.equals(this.name);
        //|| this.mom.duplicateNames() 
        //|| this.dad.duplicateNames();
    } 

  public boolean stringEqualsName(String name) {
    return this.name.compareTo(name) == 0;
  }

}

class ExamplesIAT {

  IAT davisSr = new Person("Davis", new Unknown(), new Unknown());
  IAT edna = new Person("Edna", new Unknown(), new Unknown());
  IAT davisJr = new Person("Davis", davisSr, edna);
  IAT carl = new Person("Carl", new Unknown(), new Unknown());
  IAT candace = new Person("Candace", davisJr, new Unknown());
  IAT claire = new Person("Claire", new Unknown(), new Unknown());
  IAT bill = new Person("Bill", carl, candace);
  IAT bree = new Person("Bree", new Unknown(), claire);
  IAT anthony = new Person("Anthony", bill, bree);
  IAT bill2 = new Person("Bill", bill, bree);
  IAT candace2 = new Person("Candace", bill, bree);
  IAT davis2 = new Person("Davis", bill, bree);

  // test method for containsNames
  boolean testContainsNames(Tester t) {
    return t.checkExpect(this.davisSr.containsNames("Hi"), false)
        && t.checkExpect(this.davisSr.containsNames("Davis"), true)
        && t.checkExpect(this.bree.containsNames("Claire"), true)
        && t.checkExpect(this.bree.containsNames("Al"), false)
        && t.checkExpect(this.carl.containsNames("Bill"), false)
        && t.checkExpect(this.anthony.containsNames("Davis"), true)
        && t.checkExpect(this.anthony.containsNames("be"), false)
        && t.checkExpect(this.bree.containsNames("Claire"), true)
        && t.checkExpect(this.bree.containsNames("Bree"), true);
  }
  
  // test method for duplicateNames
  boolean testDuplicateNames(Tester t) {
    return t.checkExpect(this.davisSr.duplicateNames(), false)
        && t.checkExpect(this.bill2.duplicateNames(), true)
        && t.checkExpect(this.candace2.duplicateNames(), true)
        && t.checkExpect(this.davis2.duplicateNames(), true)
        && t.checkExpect(this.claire.duplicateNames(), false)
        && t.checkExpect(this.edna.duplicateNames(), false)
        && t.checkExpect(this.brill.duplicateNames(), false);
  }
}
  
